#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def RealizarAdicion(self, enteroA, enteroB):
        """
        Parameters:
         - enteroA
         - enteroB

        """
        pass

    def RealizarSubstraccion(self, enteroA, enteroB):
        """
        Parameters:
         - enteroA
         - enteroB

        """
        pass

    def RealizarMultiplicacion(self, enteroA, enteroB):
        """
        Parameters:
         - enteroA
         - enteroB

        """
        pass

    def RealizarDivision(self, enteroA, enteroB):
        """
        Parameters:
         - enteroA
         - enteroB

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def RealizarAdicion(self, enteroA, enteroB):
        """
        Parameters:
         - enteroA
         - enteroB

        """
        self.send_RealizarAdicion(enteroA, enteroB)
        return self.recv_RealizarAdicion()

    def send_RealizarAdicion(self, enteroA, enteroB):
        self._oprot.writeMessageBegin('RealizarAdicion', TMessageType.CALL, self._seqid)
        args = RealizarAdicion_args()
        args.enteroA = enteroA
        args.enteroB = enteroB
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_RealizarAdicion(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = RealizarAdicion_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "RealizarAdicion failed: unknown result")

    def RealizarSubstraccion(self, enteroA, enteroB):
        """
        Parameters:
         - enteroA
         - enteroB

        """
        self.send_RealizarSubstraccion(enteroA, enteroB)
        return self.recv_RealizarSubstraccion()

    def send_RealizarSubstraccion(self, enteroA, enteroB):
        self._oprot.writeMessageBegin('RealizarSubstraccion', TMessageType.CALL, self._seqid)
        args = RealizarSubstraccion_args()
        args.enteroA = enteroA
        args.enteroB = enteroB
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_RealizarSubstraccion(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = RealizarSubstraccion_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "RealizarSubstraccion failed: unknown result")

    def RealizarMultiplicacion(self, enteroA, enteroB):
        """
        Parameters:
         - enteroA
         - enteroB

        """
        self.send_RealizarMultiplicacion(enteroA, enteroB)
        return self.recv_RealizarMultiplicacion()

    def send_RealizarMultiplicacion(self, enteroA, enteroB):
        self._oprot.writeMessageBegin('RealizarMultiplicacion', TMessageType.CALL, self._seqid)
        args = RealizarMultiplicacion_args()
        args.enteroA = enteroA
        args.enteroB = enteroB
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_RealizarMultiplicacion(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = RealizarMultiplicacion_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "RealizarMultiplicacion failed: unknown result")

    def RealizarDivision(self, enteroA, enteroB):
        """
        Parameters:
         - enteroA
         - enteroB

        """
        self.send_RealizarDivision(enteroA, enteroB)
        return self.recv_RealizarDivision()

    def send_RealizarDivision(self, enteroA, enteroB):
        self._oprot.writeMessageBegin('RealizarDivision', TMessageType.CALL, self._seqid)
        args = RealizarDivision_args()
        args.enteroA = enteroA
        args.enteroB = enteroB
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_RealizarDivision(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = RealizarDivision_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "RealizarDivision failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["RealizarAdicion"] = Processor.process_RealizarAdicion
        self._processMap["RealizarSubstraccion"] = Processor.process_RealizarSubstraccion
        self._processMap["RealizarMultiplicacion"] = Processor.process_RealizarMultiplicacion
        self._processMap["RealizarDivision"] = Processor.process_RealizarDivision
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_RealizarAdicion(self, seqid, iprot, oprot):
        args = RealizarAdicion_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = RealizarAdicion_result()
        try:
            result.success = self._handler.RealizarAdicion(args.enteroA, args.enteroB)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("RealizarAdicion", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_RealizarSubstraccion(self, seqid, iprot, oprot):
        args = RealizarSubstraccion_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = RealizarSubstraccion_result()
        try:
            result.success = self._handler.RealizarSubstraccion(args.enteroA, args.enteroB)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("RealizarSubstraccion", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_RealizarMultiplicacion(self, seqid, iprot, oprot):
        args = RealizarMultiplicacion_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = RealizarMultiplicacion_result()
        try:
            result.success = self._handler.RealizarMultiplicacion(args.enteroA, args.enteroB)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("RealizarMultiplicacion", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_RealizarDivision(self, seqid, iprot, oprot):
        args = RealizarDivision_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = RealizarDivision_result()
        try:
            result.success = self._handler.RealizarDivision(args.enteroA, args.enteroB)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("RealizarDivision", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class RealizarAdicion_args(object):
    """
    Attributes:
     - enteroA
     - enteroB

    """


    def __init__(self, enteroA=None, enteroB=None,):
        self.enteroA = enteroA
        self.enteroB = enteroB

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.enteroA = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.enteroB = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealizarAdicion_args')
        if self.enteroA is not None:
            oprot.writeFieldBegin('enteroA', TType.I32, 1)
            oprot.writeI32(self.enteroA)
            oprot.writeFieldEnd()
        if self.enteroB is not None:
            oprot.writeFieldBegin('enteroB', TType.I32, 2)
            oprot.writeI32(self.enteroB)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RealizarAdicion_args)
RealizarAdicion_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'enteroA', None, None, ),  # 1
    (2, TType.I32, 'enteroB', None, None, ),  # 2
)


class RealizarAdicion_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Resultado()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealizarAdicion_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RealizarAdicion_result)
RealizarAdicion_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Resultado, None], None, ),  # 0
)


class RealizarSubstraccion_args(object):
    """
    Attributes:
     - enteroA
     - enteroB

    """


    def __init__(self, enteroA=None, enteroB=None,):
        self.enteroA = enteroA
        self.enteroB = enteroB

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.enteroA = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.enteroB = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealizarSubstraccion_args')
        if self.enteroA is not None:
            oprot.writeFieldBegin('enteroA', TType.I32, 1)
            oprot.writeI32(self.enteroA)
            oprot.writeFieldEnd()
        if self.enteroB is not None:
            oprot.writeFieldBegin('enteroB', TType.I32, 2)
            oprot.writeI32(self.enteroB)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RealizarSubstraccion_args)
RealizarSubstraccion_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'enteroA', None, None, ),  # 1
    (2, TType.I32, 'enteroB', None, None, ),  # 2
)


class RealizarSubstraccion_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Resultado()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealizarSubstraccion_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RealizarSubstraccion_result)
RealizarSubstraccion_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Resultado, None], None, ),  # 0
)


class RealizarMultiplicacion_args(object):
    """
    Attributes:
     - enteroA
     - enteroB

    """


    def __init__(self, enteroA=None, enteroB=None,):
        self.enteroA = enteroA
        self.enteroB = enteroB

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.enteroA = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.enteroB = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealizarMultiplicacion_args')
        if self.enteroA is not None:
            oprot.writeFieldBegin('enteroA', TType.I32, 1)
            oprot.writeI32(self.enteroA)
            oprot.writeFieldEnd()
        if self.enteroB is not None:
            oprot.writeFieldBegin('enteroB', TType.I32, 2)
            oprot.writeI32(self.enteroB)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RealizarMultiplicacion_args)
RealizarMultiplicacion_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'enteroA', None, None, ),  # 1
    (2, TType.I32, 'enteroB', None, None, ),  # 2
)


class RealizarMultiplicacion_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Resultado()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealizarMultiplicacion_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RealizarMultiplicacion_result)
RealizarMultiplicacion_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Resultado, None], None, ),  # 0
)


class RealizarDivision_args(object):
    """
    Attributes:
     - enteroA
     - enteroB

    """


    def __init__(self, enteroA=None, enteroB=None,):
        self.enteroA = enteroA
        self.enteroB = enteroB

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.enteroA = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.enteroB = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealizarDivision_args')
        if self.enteroA is not None:
            oprot.writeFieldBegin('enteroA', TType.I32, 1)
            oprot.writeI32(self.enteroA)
            oprot.writeFieldEnd()
        if self.enteroB is not None:
            oprot.writeFieldBegin('enteroB', TType.I32, 2)
            oprot.writeI32(self.enteroB)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RealizarDivision_args)
RealizarDivision_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'enteroA', None, None, ),  # 1
    (2, TType.I32, 'enteroB', None, None, ),  # 2
)


class RealizarDivision_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Resultado()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealizarDivision_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RealizarDivision_result)
RealizarDivision_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Resultado, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs

