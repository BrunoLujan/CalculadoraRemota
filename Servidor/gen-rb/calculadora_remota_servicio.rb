#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'calculadora_remota_types'

module CalculadoraRemotaServicio
  class Client
    include ::Thrift::Client

    def RealizarAdicion(enteroA, enteroB)
      send_RealizarAdicion(enteroA, enteroB)
      return recv_RealizarAdicion()
    end

    def send_RealizarAdicion(enteroA, enteroB)
      send_message('RealizarAdicion', RealizarAdicion_args, :enteroA => enteroA, :enteroB => enteroB)
    end

    def recv_RealizarAdicion()
      result = receive_message(RealizarAdicion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RealizarAdicion failed: unknown result')
    end

    def RealizarSubstraccion(enteroA, enteroB)
      send_RealizarSubstraccion(enteroA, enteroB)
      return recv_RealizarSubstraccion()
    end

    def send_RealizarSubstraccion(enteroA, enteroB)
      send_message('RealizarSubstraccion', RealizarSubstraccion_args, :enteroA => enteroA, :enteroB => enteroB)
    end

    def recv_RealizarSubstraccion()
      result = receive_message(RealizarSubstraccion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RealizarSubstraccion failed: unknown result')
    end

    def RealizarMultiplicacion(enteroA, enteroB)
      send_RealizarMultiplicacion(enteroA, enteroB)
      return recv_RealizarMultiplicacion()
    end

    def send_RealizarMultiplicacion(enteroA, enteroB)
      send_message('RealizarMultiplicacion', RealizarMultiplicacion_args, :enteroA => enteroA, :enteroB => enteroB)
    end

    def recv_RealizarMultiplicacion()
      result = receive_message(RealizarMultiplicacion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RealizarMultiplicacion failed: unknown result')
    end

    def RealizarDivision(enteroA, enteroB)
      send_RealizarDivision(enteroA, enteroB)
      return recv_RealizarDivision()
    end

    def send_RealizarDivision(enteroA, enteroB)
      send_message('RealizarDivision', RealizarDivision_args, :enteroA => enteroA, :enteroB => enteroB)
    end

    def recv_RealizarDivision()
      result = receive_message(RealizarDivision_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RealizarDivision failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_RealizarAdicion(seqid, iprot, oprot)
      args = read_args(iprot, RealizarAdicion_args)
      result = RealizarAdicion_result.new()
      result.success = @handler.RealizarAdicion(args.enteroA, args.enteroB)
      write_result(result, oprot, 'RealizarAdicion', seqid)
    end

    def process_RealizarSubstraccion(seqid, iprot, oprot)
      args = read_args(iprot, RealizarSubstraccion_args)
      result = RealizarSubstraccion_result.new()
      result.success = @handler.RealizarSubstraccion(args.enteroA, args.enteroB)
      write_result(result, oprot, 'RealizarSubstraccion', seqid)
    end

    def process_RealizarMultiplicacion(seqid, iprot, oprot)
      args = read_args(iprot, RealizarMultiplicacion_args)
      result = RealizarMultiplicacion_result.new()
      result.success = @handler.RealizarMultiplicacion(args.enteroA, args.enteroB)
      write_result(result, oprot, 'RealizarMultiplicacion', seqid)
    end

    def process_RealizarDivision(seqid, iprot, oprot)
      args = read_args(iprot, RealizarDivision_args)
      result = RealizarDivision_result.new()
      result.success = @handler.RealizarDivision(args.enteroA, args.enteroB)
      write_result(result, oprot, 'RealizarDivision', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class RealizarAdicion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ENTEROA = 1
    ENTEROB = 2

    FIELDS = {
      ENTEROA => {:type => ::Thrift::Types::I32, :name => 'enteroA'},
      ENTEROB => {:type => ::Thrift::Types::I32, :name => 'enteroB'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RealizarAdicion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Resultado}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RealizarSubstraccion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ENTEROA = 1
    ENTEROB = 2

    FIELDS = {
      ENTEROA => {:type => ::Thrift::Types::I32, :name => 'enteroA'},
      ENTEROB => {:type => ::Thrift::Types::I32, :name => 'enteroB'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RealizarSubstraccion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Resultado}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RealizarMultiplicacion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ENTEROA = 1
    ENTEROB = 2

    FIELDS = {
      ENTEROA => {:type => ::Thrift::Types::I32, :name => 'enteroA'},
      ENTEROB => {:type => ::Thrift::Types::I32, :name => 'enteroB'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RealizarMultiplicacion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Resultado}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RealizarDivision_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ENTEROA = 1
    ENTEROB = 2

    FIELDS = {
      ENTEROA => {:type => ::Thrift::Types::I32, :name => 'enteroA'},
      ENTEROB => {:type => ::Thrift::Types::I32, :name => 'enteroB'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RealizarDivision_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Resultado}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

